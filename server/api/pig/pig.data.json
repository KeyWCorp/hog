{
  "44": {
    "name": "Mikes_Script",
    "data": "REGISTER /home/maparco/jars/datafu.jar\nREGISTER /home/maparco/jars/parquet-pig-bundle-1.6.0.jar\nDEFINE PageRank datafu.pig.linkanalysis.PageRank('alpha','0.87','dangling_nodes','true');\n\n--Load tcpdump sensor data with geo enrichment\ndata = LOAD 'hdfs://10.1.10.26:8020/test/netflow_parquet/*.parquet' USING parquet.pig.ParquetLoader();\ndata = FILTER data BY direction MATCHES 'INBOUND';\ndata = FOREACH data GENERATE '0' AS topic, srcIP AS source, destIP AS dest, 1.0 AS weight:double;\ndata = FILTER data BY (source IS NOT NULL) OR (dest IS NOT NULL);\ntopic_edges = DISTINCT data;\n\nsource = FOREACH topic_edges GENERATE source;\ndest = FOREACH topic_edges GENERATE dest;\nsource = DISTINCT source;\ndest = DISTINCT dest;\nsource = RANK source;\ndest = RANK dest;\n\ntopic_edges_source = JOIN topic_edges BY source, source BY source;\ntopic_edges_source = FOREACH topic_edges_source GENERATE topic_edges::topic AS topic, source::rank_source AS source, topic_edges::weight AS weight, topic_edges::source AS ipSrc, topic_edges::dest AS ipDest;\ntopic_edges_dest = JOIN topic_edges_source BY ipDest, dest BY dest;\ntopic_edges_dest = FOREACH topic_edges_dest GENERATE topic_edges_source::topic AS topic, topic_edges_source::source AS source, dest::rank_dest AS dest, topic_edges_source::weight AS weight, topic_edges_source::ipSrc AS ipSrc, dest::dest AS ipDest;\n\ntopic_edges = FOREACH topic_edges_dest GENERATE (chararray)topic,(int)source,(int)dest,(double)weight,(chararray)ipSrc,(chararray)ipDest;\ntopic_edges_grouped = FOREACH (GROUP topic_edges BY (topic,source)) GENERATE group.topic AS topic, group.source AS source, topic_edges.(dest,weight) AS edges;\n\ntopic_ranks = FOREACH (GROUP topic_edges_grouped BY topic) GENERATE group AS topic,FLATTEN(PageRank(topic_edges_grouped.(source,edges))) AS (source,rank);\n\ntopic_ranks = FOREACH topic_ranks GENERATE topic, source, (rank*100) AS rank;\ntopic_ranks = JOIN topic_ranks BY source, source BY rank_source;\ntopic_ranks = FOREACH topic_ranks GENERATE source::source AS ipSrc, topic_ranks::rank AS rank;\ntopic_ranks = ORDER topic_ranks BY rank DESC;\nDUMP topic_ranks;",
    "args": [
      {
        "arg": "-x",
        "input": "local"
      }
    ],
    "id": 44,
    "logs": [],
    "output": [],
    "bar": true
  },
  "45": {
    "name": "Hog_Tracker",
    "data": "A = LOAD 'file:///home/HOG/hog/node_modules/pig-parser/src/test.data' AS (numbers:int);\nB = GROUP A ALL;\nC = FOREACH B GENERATE SUM(A.numbers) AS count, MIN(A.numbers) as minimum;\nD = FOREACH B GENERATE MIN(A.numbers) as count, MAX(A.numbers) AS minimum;\nE = FOREACH B GENERATE SUM(A.numbers) AS count, AVG(A.numbers) AS minimum;\n\nEXPLAIN C;\nEXPLAIN D;\n\nDESCRIBE C;\nDESCRIBE D;\nDESCRIBE E;\n\nDUMP C;\nDUMP D;\nDUMP E;",
    "args": [
      {
        "arg": "-x",
        "input": "local"
      }
    ],
    "id": 45,
    "logs": [],
    "output": [],
    "graph": "bar",
    "setting": {
      "graph": []
    },
    "setings": [
      null
    ],
    "settings": [],
    "radar": true,
    "bar": false,
    "line": false,
    "numbOutput": "1344"
  },
  "451": {
    "name": "Simple_Script",
    "data": "load0 = LOAD 'file:///home/HOG/hog/t.data' USING PigStorage(' ') AS (x:int);\nDUMP load0;\n",
    "args": [
      {
        "arg": "-x",
        "input": "local"
      }
    ],
    "bar": true,
    "line": false,
    "radar": false,
    "nodes": [
      {
        "x": 335.5,
        "y": 47.89999999999998,
        "width": 300,
        "height": 124,
        "name": "new node 0",
        "category": "input",
        "type": "load",
        "params": [
          {
            "name": "source",
            "value": "/Users/kmcoxe/Documents/IPI/test/test.data"
          },
          {
            "name": "format",
            "value": "(x:int, y:int)"
          }
        ],
        "script": {
          "input_var": false,
          "output_var": true,
          "variables": [
            "source",
            "format"
          ],
          "content": "<output_var> = LOAD '<source>' USING PigStorage(' ') AS <format>;"
        },
        "output": "load0",
        "fixed": 1,
        "index": 0,
        "weight": 1,
        "px": 335.5,
        "py": 47.89999999999998,
        "output_node": 1
      },
      {
        "x": 352.5,
        "y": 289.9,
        "width": 300,
        "height": 124,
        "name": "new node 1",
        "category": "output",
        "type": "dump",
        "params": [],
        "script": {
          "input_var": true,
          "output_var": false,
          "variables": [],
          "content": "DUMP <input_var>;"
        },
        "output": "dump1",
        "fixed": true,
        "index": 1,
        "weight": 1,
        "px": 352.5,
        "py": 289.9,
        "input_node": 0,
        "input": "load0"
      }
    ],
    "links": [
      {
        "source": {
          "x": 335.5,
          "y": 47.89999999999998,
          "width": 300,
          "height": 124,
          "name": "new node 0",
          "category": "input",
          "type": "load",
          "params": [
            {
              "name": "source",
              "value": "/Users/kmcoxe/Documents/IPI/test/test.data"
            },
            {
              "name": "format",
              "value": "(x:int, y:int)"
            }
          ],
          "script": {
            "input_var": false,
            "output_var": true,
            "variables": [
              "source",
              "format"
            ],
            "content": "<output_var> = LOAD '<source>' USING PigStorage(' ') AS <format>;"
          },
          "output": "load0",
          "fixed": 1,
          "index": 0,
          "weight": 1,
          "px": 335.5,
          "py": 47.89999999999998,
          "output_node": 1
        },
        "target": {
          "x": 352.5,
          "y": 289.9,
          "width": 300,
          "height": 124,
          "name": "new node 1",
          "category": "output",
          "type": "dump",
          "params": [],
          "script": {
            "input_var": true,
            "output_var": false,
            "variables": [],
            "content": "DUMP <input_var>;"
          },
          "output": "dump1",
          "fixed": true,
          "index": 1,
          "weight": 1,
          "px": 352.5,
          "py": 289.9,
          "input_node": 0,
          "input": "load0"
        }
      }
    ],
    "type": "simple",
    "id": "451",
    "logs": [],
    "output": []
  },
  "452": {
    "name": "Another_simple_script",
    "data": "load0 = LOAD '/Users/kmcoxe/Documents/IPI/test/test.data' USING PigStorage(' ') AS (x:int, y:int);\nsum1group = GROUP load0 BY x;\nsum1 = FOREACH sum1group GENERATE SUM(load0.x) AS x;\nDUMP sum1;\n",
    "args": [
      {
        "arg": "-x",
        "input": "local"
      }
    ],
    "bar": true,
    "line": false,
    "radar": false,
    "nodes": [
      {
        "x": 42.5,
        "y": 40.89999999999998,
        "width": 300,
        "height": 124,
        "name": "new node 0",
        "category": "input",
        "type": "load",
        "params": [
          {
            "name": "source",
            "value": "/Users/kmcoxe/Documents/IPI/test/test.data"
          },
          {
            "name": "format",
            "value": "(x:int, y:int)"
          }
        ],
        "script": {
          "input_var": false,
          "output_var": true,
          "variables": [
            "source",
            "format"
          ],
          "content": "<output_var> = LOAD '<source>' USING PigStorage(' ') AS <format>;"
        },
        "output": "load0",
        "fixed": 1,
        "index": 0,
        "weight": 1,
        "px": 42.5,
        "py": 40.89999999999998,
        "output_node": 1
      },
      {
        "x": 509.5,
        "y": 236.89999999999998,
        "width": 300,
        "height": 124,
        "name": "new node 1",
        "category": "function",
        "type": "sum",
        "params": [
          {
            "name": "type",
            "value": "x"
          }
        ],
        "script": {
          "input_var": true,
          "output_var": true,
          "variables": [
            "type"
          ],
          "content": "<output_var>group = GROUP <input_var> BY <type>;\n<output_var> = FOREACH <output_var>group GENERATE SUM(<input_var>.<type>) AS <type>;"
        },
        "output": "sum1",
        "fixed": 1,
        "index": 1,
        "weight": 2,
        "px": 509.5,
        "py": 236.89999999999998,
        "input_node": 0,
        "input": "load0",
        "output_node": 2
      },
      {
        "x": 151.5,
        "y": 430.9,
        "width": 300,
        "height": 124,
        "name": "new node 2",
        "category": "output",
        "type": "dump",
        "params": [],
        "script": {
          "input_var": true,
          "output_var": false,
          "variables": [],
          "content": "DUMP <input_var>;"
        },
        "output": "dump2",
        "fixed": 1,
        "index": 2,
        "weight": 1,
        "px": 151.5,
        "py": 430.9,
        "input_node": 1,
        "input": "sum1"
      }
    ],
    "links": [
      {
        "source": {
          "x": 42.5,
          "y": 40.89999999999998,
          "width": 300,
          "height": 124,
          "name": "new node 0",
          "category": "input",
          "type": "load",
          "params": [
            {
              "name": "source",
              "value": "/Users/kmcoxe/Documents/IPI/test/test.data"
            },
            {
              "name": "format",
              "value": "(x:int, y:int)"
            }
          ],
          "script": {
            "input_var": false,
            "output_var": true,
            "variables": [
              "source",
              "format"
            ],
            "content": "<output_var> = LOAD '<source>' USING PigStorage(' ') AS <format>;"
          },
          "output": "load0",
          "fixed": 1,
          "index": 0,
          "weight": 1,
          "px": 42.5,
          "py": 40.89999999999998,
          "output_node": 1
        },
        "target": {
          "x": 509.5,
          "y": 236.89999999999998,
          "width": 300,
          "height": 124,
          "name": "new node 1",
          "category": "function",
          "type": "sum",
          "params": [
            {
              "name": "type",
              "value": "x"
            }
          ],
          "script": {
            "input_var": true,
            "output_var": true,
            "variables": [
              "type"
            ],
            "content": "<output_var>group = GROUP <input_var> BY <type>;\n<output_var> = FOREACH <output_var>group GENERATE SUM(<input_var>.<type>) AS <type>;"
          },
          "output": "sum1",
          "fixed": 1,
          "index": 1,
          "weight": 2,
          "px": 509.5,
          "py": 236.89999999999998,
          "input_node": 0,
          "input": "load0",
          "output_node": 2
        }
      },
      {
        "source": {
          "x": 509.5,
          "y": 236.89999999999998,
          "width": 300,
          "height": 124,
          "name": "new node 1",
          "category": "function",
          "type": "sum",
          "params": [
            {
              "name": "type",
              "value": "x"
            }
          ],
          "script": {
            "input_var": true,
            "output_var": true,
            "variables": [
              "type"
            ],
            "content": "<output_var>group = GROUP <input_var> BY <type>;\n<output_var> = FOREACH <output_var>group GENERATE SUM(<input_var>.<type>) AS <type>;"
          },
          "output": "sum1",
          "fixed": 1,
          "index": 1,
          "weight": 2,
          "px": 509.5,
          "py": 236.89999999999998,
          "input_node": 0,
          "input": "load0",
          "output_node": 2
        },
        "target": {
          "x": 151.5,
          "y": 430.9,
          "width": 300,
          "height": 124,
          "name": "new node 2",
          "category": "output",
          "type": "dump",
          "params": [],
          "script": {
            "input_var": true,
            "output_var": false,
            "variables": [],
            "content": "DUMP <input_var>;"
          },
          "output": "dump2",
          "fixed": 1,
          "index": 2,
          "weight": 1,
          "px": 151.5,
          "py": 430.9,
          "input_node": 1,
          "input": "sum1"
        }
      }
    ],
    "type": "simple",
    "id": 452,
    "logs": [],
    "output": []
  },
  "4521": {
    "name": "test",
    "data": "/*\n Author: Michael Parco (mparco)\n Date: 05/03/2016\n Company: The KeyW Corporation\n Organization: CCIS IRaD\n\n Description: Analytic to detect advanced persistent threats in network traffic. Analytic calculates the Log Likelihood Ratio of cooccurance for given A and B fields. Examples of these fields could be (srcIP,destIP), (srcPort, destPort), (srcIP, srcPort), (destIP, destPort) etc. The Mahout Math library is utilized to calculate the actual LLR, this is the only dependency on external JARS.\n Use: This analytic accepts 3 paramers dataset, A, and B field. to run input paramters as such\" pig -param dataset= -param A= -param B= SequenceStats.pig\n*/\n\n--REGISTER JARS and DEFINE functions\nREGISTER '/home/maparco/spark-analytics/jars/mahout-math-0.12.0.jar'\nREGISTER '/home/maparco/spark-analytics/jars/elasticsearch-hadoop-pig-2.2.0-rc1.jar'\nDEFINE LLR InvokeForString('org.apache.mahout.math.stats.LogLikelihood.logLikelihoodRatio', 'long long long long');\nDEFINE EsStorage org.elasticsearch.hadoop.pig.EsStorage('es.nodes=10.1.10.26','es.port=9200');\n\n--Load various data inputs from HDFS into script\n$dataset = LOAD '/in/$dataset/2016/*/*/*' USING AvroStorage();\n\n--Calculate counts for pairs and uniques\nk11 = FOREACH (GROUP $dataset BY ($A,$B)) GENERATE FLATTEN(group) AS ($A,$B), COUNT($dataset) AS k11;\nk1x = FOREACH (GROUP $dataset BY $A) GENERATE FLATTEN(group) AS $A, COUNT($dataset) AS k1x;\nkx2 = FOREACH (GROUP $dataset BY $B) GENERATE FLATTEN(group) AS $B, COUNT($dataset) AS kx2;\nkxx = FOREACH (GROUP $dataset ALL) GENERATE COUNT($dataset) AS kxx;\n\n--JOIN k11, k1x, kx2\nk11_k1x = JOIN k11 BY $A, k1x BY $A;\nk11_kx2 = JOIN k11 BY $B, kx2 BY $B;\n\n\n--Count k12 and k21\nk12 = FOREACH k11_k1x GENERATE k11::$A AS $A, k11::$B AS $B, k11::k11 AS k11, (k1x::k1x - k11::k11) AS k12;\nk21 = FOREACH k11_kx2 GENERATE k11::$A AS $A, k11::$B AS $B, k11::k11 AS k11, (kx2::kx2 - k11::k11) AS k21;\n\n--UNION kxx, k11, k12, and k21\nk11_k12_k21 = JOIN k12 BY ($A, $B), k21 BY ($A, $B);\nk11_k12_k21 = FOREACH k11_k12_k21 GENERATE k12::$A AS $A, k12::$B AS $B, k12::k11 AS k11, k12::k12 AS k12, k21::k21 AS k21;\nk11_k12_k21_kxx = CROSS k11_k12_k21, kxx;\nk11_k12_k21_kxx = FOREACH k11_k12_k21_kxx GENERATE k11_k12_k21::$A AS $A, k11_k12_k21::$B AS $B, k11_k12_k21::k11 AS k11, k11_k12_k21::k12 AS k12, k11_k12_k21::k21 AS k21, kxx::kxx AS kxx;\n\n--Count k22\nk22 = FOREACH k11_k12_k21_kxx GENERATE $A, $B, k11, k12, k21, (kxx - k11 - k12 - k21) AS k22;\n\n--Calculate LLR\nllr = FOREACH k22 GENERATE $A, $B, LLR(k11,k12,k21,k22) AS llr;\nllr = ORDER llr BY llr DESC;\n\n--STORE $A, $B, llr\ntest = LIMIT llr 25;\nDUMP test;",
    "args": [
      {
        "arg": "-x",
        "input": "tez"
      }
    ],
    "id": "4521",
    "logs": [],
    "output": []
  }
}