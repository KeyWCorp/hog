{
  "43": {
    "name": "Steve_Test",
    "data": "A = LOAD 'file:///Users/rick/Desktop/HOG/hog2/hog/test.data' AS (one:int,two:int,three:int);\nB = FILTER A BY one > 1;\nDUMP B;",
    "args": [
      {
        "arg": "-x",
        "input": "local"
      }
    ],
    "id": 43,
    "logs": [],
    "output": []
  },
  "44": {
    "name": "Kevin_Test",
    "data": "REGISTER /home/maparco/jars/datafu.jar\nREGISTER /home/maparco/jars/parquet-pig-bundle-1.6.0.jar\nDEFINE PageRank datafu.pig.linkanalysis.PageRank('alpha','0.87','dangling_nodes','true');\n\n--Load tcpdump sensor data with geo enrichment\ndata = LOAD 'hdfs://10.1.10.26:8020/test/netflow_parquet/*.parquet' USING parquet.pig.ParquetLoader();\ndata = FILTER data BY direction MATCHES 'INBOUND';\ndata = FOREACH data GENERATE '0' AS topic, srcIP AS source, destIP AS dest, 1.0 AS weight:double;\ndata = FILTER data BY (source IS NOT NULL) OR (dest IS NOT NULL);\ntopic_edges = DISTINCT data;\n\nsource = FOREACH topic_edges GENERATE source;\ndest = FOREACH topic_edges GENERATE dest;\nsource = DISTINCT source;\ndest = DISTINCT dest;\nsource = RANK source;\ndest = RANK dest;\n\ntopic_edges_source = JOIN topic_edges BY source, source BY source;\ntopic_edges_source = FOREACH topic_edges_source GENERATE topic_edges::topic AS topic, source::rank_source AS source, topic_edges::weight AS weight, topic_edges::source AS ipSrc, topic_edges::dest AS ipDest;\ntopic_edges_dest = JOIN topic_edges_source BY ipDest, dest BY dest;\ntopic_edges_dest = FOREACH topic_edges_dest GENERATE topic_edges_source::topic AS topic, topic_edges_source::source AS source, dest::rank_dest AS dest, topic_edges_source::weight AS weight, topic_edges_source::ipSrc AS ipSrc, dest::dest AS ipDest;\n\ntopic_edges = FOREACH topic_edges_dest GENERATE (chararray)topic,(int)source,(int)dest,(double)weight,(chararray)ipSrc,(chararray)ipDest;\ntopic_edges_grouped = FOREACH (GROUP topic_edges BY (topic,source)) GENERATE group.topic AS topic, group.source AS source, topic_edges.(dest,weight) AS edges;\n\ntopic_ranks = FOREACH (GROUP topic_edges_grouped BY topic) GENERATE group AS topic,FLATTEN(PageRank(topic_edges_grouped.(source,edges))) AS (source,rank);\n\ntopic_ranks = FOREACH topic_ranks GENERATE topic, source, (rank*100) AS rank;\ntopic_ranks = JOIN topic_ranks BY source, source BY rank_source;\ntopic_ranks = FOREACH topic_ranks GENERATE source::source AS ipSrc, topic_ranks::rank AS rank;\ntopic_ranks = ORDER topic_ranks BY rank DESC;\nDUMP topic_ranks;",
    "args": [
      {
        "arg": "-x",
        "input": "local"
      }
    ],
    "id": 44,
    "logs": [],
    "output": []
  },
  "45": {
    "name": "Rick_Test",
    "data": "A = LOAD '/Users/kmcoxe/Documents/IPI/pig-parser/src/test.data' AS (numbers:int);                                                    \nB = GROUP A ALL;                                                                                                                     \nC = FOREACH B GENERATE SUM(A.numbers) AS count, MIN(A.numbers) as minimum, MAX(A.numbers) AS maximum, AVG(A.numbers) AS average;     \nD = FOREACH B GENERATE MIN(A.numbers) as minimum, MAX(A.numbers) AS maximum;                                                         \nE = FOREACH B GENERATE SUM(A.numbers) AS count, AVG(A.numbers) AS average;                                                           \n                                                                                                                                     \nEXPLAIN C;                                                                                                                           \nEXPLAIN D;                                                                                                                           \n                                                                                                                                     \nDESCRIBE C;                                                                                                                          \nDESCRIBE D;                                                                                                                          \nDESCRIBE E;                                                                                                                          \n                                                                                                                                     \nDUMP C;                                                                                                                              \nDUMP D;                                                                                                                              \nDUMP E;",
    "args": [
      {
        "arg": "-x",
        "input": "local"
      }
    ],
    "id": 45,
    "logs": [],
    "output": []
  }
}